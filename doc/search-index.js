var searchIndex = {};
searchIndex['comp_sci'] = {"items":[[0,"","comp_sci","This project consists of articles, data structures, algorithms and solutions to common problems."],[3,"remove_duplicates_by_sorting","","Removes duplicate entries from Vec with a complexity of O(n log n + n) I believe (TODO)."],[3,"remove_duplicates_with_dual_pointers","","Removes duplicate entries from Vec with a complexity of O(n(n+1)/2)."],[3,"binary_search","","Finds the position of the key within the given slice."],[0,"algorithms","",""],[0,"insertion_sort","comp_sci::algorithms",""],[3,"insertion_sort","comp_sci::algorithms::insertion_sort","Efficient sorting against small or already sorted sets."],[0,"selection_sort","comp_sci::algorithms",""],[3,"selection_sort","comp_sci::algorithms::selection_sort","Efficient sorting against small sets."],[0,"merge_sort","comp_sci::algorithms",""],[3,"merge_sort","comp_sci::algorithms::merge_sort","Efficient sorting against large sets. Requires `O(n)` aux. space."],[0,"quick_sort","comp_sci::algorithms",""],[3,"quick_sort","comp_sci::algorithms::quick_sort","Efficient sorting against large sets."],[0,"murmur","comp_sci::algorithms","The murmur hash is a relatively fast non-cryptographic hash function for platforms with efficient multiplication."],[3,"murmur3_32","comp_sci::algorithms::murmur",""],[3,"murmur3_32_seed","",""],[0,"data_structures","comp_sci",""],[0,"heap_array","comp_sci::data_structures","An implementation of a fixed-size array data structure on the heap."],[1,"HeapArray","comp_sci::data_structures::heap_array","An implementation of a fixed-size mutable array, which is allocated on the heap."],[10,"with_capacity","","Creates a new HeapArray by allocating the given amount of capacity.",0],[10,"as_mut_slice","","",0],[10,"copy","","Creates a new array with the given capacity and copies the contents to it.",0],[10,"swap","","Swaps the elements at given indices.",0],[10,"capacity","","Returns the capacity for this array.",0],[10,"as_slice","","",0],[4,"Output","",""],[10,"index","","",0],[4,"Output","",""],[10,"index_mut","","",0],[0,"array_list","comp_sci::data_structures","An implementation of a growable list type."],[1,"ArrayList","comp_sci::data_structures::array_list","An implementation of a growable and mutable array type, which is allocated on the heap."],[10,"new","","Creates a new array list with a default capacity of 10.",1],[10,"with_capacity","","Creates a new array list with the given capacity.",1],[10,"push","","Adds an element to the end of the list.",1],[10,"insert","","Inserts an element at the given index.",1],[10,"remove_at","","Removes an element at the given index.",1],[10,"as_mut_slice","","",1],[10,"capacity","","Returns the capacity of this list.",1],[10,"length","","Returns the number of elements in the list.",1],[10,"as_slice","","",1],[4,"Output","",""],[10,"index","","",1],[4,"Output","",""],[10,"index_mut","","",1],[0,"doubly_linked_list","comp_sci::data_structures","An implementation of a doubly linked list."],[1,"DoublyLinkedList","comp_sci::data_structures::doubly_linked_list","An implementation of a doubly linked list."],[1,"Iter","","An iterator over the references to the items of a DoublyLinkedList."],[10,"new","","",2],[10,"push_front","","",2],[10,"push_back","","",2],[10,"iter","","Provides a forward iterator.",2],[10,"first","","Retrieves the first element.",2],[10,"last","","Retrieves the last element.",2],[10,"is_empty","","Returns whether there are any elements in the list.",2],[10,"length","","Returns the length for this list.",2],[10,"clear","","Removes all elements from the list.",2],[4,"Item","",""],[10,"next","","",3],[10,"size_hint","","",3],[0,"binary_heap","comp_sci::data_structures","An implementation of a binary heap."],[1,"BinaryHeap","comp_sci::data_structures::binary_heap","An implementation of a binary heap."],[10,"new","","",4],[10,"push","","Pushes a new element into the heap.",4],[10,"pop","","Pops out the most important element.",4],[10,"length","","Returns the length of this heap.",4],[0,"bloom_filter","comp_sci::data_structures","An implementation of a bloom filter."],[0,"programs","comp_sci",""],[0,"deadlock","comp_sci::programs","A simple program that produces a deadlock."],[3,"produce_deadlock","comp_sci::programs::deadlock","A simple program that produces a deadlock."]],"paths":[[1,"HeapArray"],[1,"ArrayList"],[1,"DoublyLinkedList"],[1,"Iter"],[1,"BinaryHeap"]]};
initSearch(searchIndex);
